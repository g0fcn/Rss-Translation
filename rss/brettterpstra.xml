<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>BrettTerpstra.com - Brett Terpstra 的疯狂科学</title>
    <link>https://brettterpstra.com/</link>
    <description></description>
    <lastBuildDate>Sat, 10 Aug 2024 01:11:24 GMT</lastBuildDate>
    <item>
      <title>SearchLink 改进了书签和历史记录搜索功能</title>
      <link>https://brett.trpstra.net/link/535/16767225/searchlink-with-improved-bookmark-and-history-searching</link>
      <description><![CDATA[ 。

Here&#39;s the summary in Chinese as requested:

SearchLink、浏览器、书签、历史记录、Bug修复

总结:
1. 作者修复了SearchLink的一些Bug。
2. 改进了浏览器搜索工具,现可扫描Arc、Chrome、Firefox、Edge和Safari的书签和浏览历史。
3. 新增了对浏览器多个配置文件的支持,可在所有配置文件中搜索匹配项。
4. 更新了对Arc浏览器的支持,适应其书签文件格式的变化。
5. 推荐Markdown写作者试用SearchLink工具。
6. 发布了SearchLink v2.3.69版本,可生成网络搜索的Markdown链接。 
[SearchLink]: searchlink
[wiki]: https://github.com/ttscoff/searchlink/wiki/Searching-Browser-History-And-Bookmarks
As many of these updates seem to, this one started with a bug report from my friend Jay Miller, which caused me to run the test suite on [SearchLink] and discover a few things had broken since I last looked at it. So you get an update.
Aside from fixing bugs that had cropped up, I spent some time on the various browser searching tools. SearchLink can [scan your browser bookmarks and browsing history][wiki] to find the most relevant link for a search term. It works with Arc, Chrome, Firefox, Edge, and Safari. And it’s pretty cool for grabbing links to things you’ve already visited or bookmarked.
Now these tools also work with profiles in most browsers, scanning all available profiles for matches. You can’t currently specify a single profile, but if a bookmark or history item exists in any of your profiles, it will be found.
I also overhauled the Arc support, as the bookmark file format has changed since I first implemented it, diverging from standard Chromium fare. Should work fine now.
Not a major update, but it’s worth mentioning. If you write Markdown and haven’t tried SearchLink, I highly recommend [taking a look][SearchLink]!
Download the latest version below:
SearchLink v2.3.69Download SearchLink v2.3.69Generate Markdown links from web searches without leaving your editor. Unzip and double click the Services to install.Published 11/10/14.Updated 08/09/24. ChangelogDonate • More info…
Like or share this post Twitter.

BrettTerpstra.com is supported by readers like you. Click here if you&#39;d like to help out.
All materials ©2024 Brett Terpstra
Twitter | Mastodon | GitHub | Privacy Policy]]></description>
      <guid>https://brett.trpstra.net/link/535/16767225/searchlink-with-improved-bookmark-and-history-searching</guid>
      <pubDate>Fri, 09 Aug 2024 17:47:00 GMT</pubDate>
    </item>
    <item>
      <title>使用 Howzit 模板加速开发</title>
      <link>https://brett.trpstra.net/link/535/16762490/speed-up-development-with-howzit-templates</link>
      <description><![CDATA[]]></description>
      <guid>https://brett.trpstra.net/link/535/16762490/speed-up-development-with-howzit-templates</guid>
      <pubDate>Mon, 05 Aug 2024 19:35:00 GMT</pubDate>
    </item>
    <item>
      <title>Binbundle：用于保存和恢复 gem 二进制文件的 gem</title>
      <link>https://brett.trpstra.net/link/535/16760430/binbundle-a-gem-for-restoring-gem-binaries</link>
      <description><![CDATA[ 。 
我昨天发布了一个脚本，用于创建系统中所有依赖 Rubygems 安装的二进制文件（可执行文件）的“bundle 文件”。Homebrew 的 bundle 命令未涵盖这些文件，我希望通过我的 dotfiles 设置轻松恢复系统。
但是……因为它专门处理 gem，我想为什么不把它做成 gem 并让它易于安装呢？
因此我提供了 Binbundle，与昨天的脚本相同，但经过了详细说明并以 gem 形式呈现。
有关安装和使用的详细信息，请参阅项目页面。该项目与 Dotbot 相结合，提供了一种非常容易的方式来恢复 Homebrew 遗漏的所有二进制文件。
点赞或分享此帖子 Twitter。

BrettTerpstra.com 得到了像您这样的读者的支持。如果您想提供帮助，请单击此处。
所有材料 ©2024 Brett Terpstra
Twitter | Mastodon | GitHub | 隐私政策]]></description>
      <guid>https://brett.trpstra.net/link/535/16760430/binbundle-a-gem-for-restoring-gem-binaries</guid>
      <pubDate>Fri, 02 Aug 2024 16:06:00 GMT</pubDate>
    </item>
    <item>
      <title>轻松保存和恢复所有 gem 可执行文件</title>
      <link>https://brett.trpstra.net/link/535/16759288/easily-save-and-restore-gem-executables</link>
      <description><![CDATA[ 。 
我一直很喜欢 Homebrew 的 bundle 命令。你可以保存使用 Homebrew 安装的所有内容的快照，然后在新系统上重新安装该快照。
我还喜欢 Ruby 的 Bundler，它允许你保存应用程序所需的所有 gem，然后使用 bundle install 轻松安装它们。
但是，我不喜欢使用 Homebrew 安装 Ruby gem，主要是因为 brew-gem 不是最新的，而且现在几乎不能用。我使用 gem install 安装所有 gem。
因此，当我执行 brew bundle install 时，gem 安装的二进制文件不会包含在内。而且 Ruby 的 bundler 是针对特定项目的。因此我编写了一个脚本，它将保存系统中安装了二进制文件的每个 gem 的快照，然后在设置新系统时对所有 gem 执行 gem install。
我为其提供了不错的 README，因此如果您对此感兴趣，请去查看。如果您使用我的任何工具，例如 howzit 或 na，您可能已经使用 gem install 安装了这些工具，如果您尝试使用 Homebrew（或点文件等）进行恢复，它们将不会被包含。所以帮自己一个忙，创建一个快照！
请使用脚本的 GitHub 主页 的问题部分分享问题和建议。
点赞或分享此帖子 Twitter。

BrettTerpstra.com 得到了像您这样的读者的支持。如果您想提供帮助，请单击此处。
所有材料 ©2024 Brett Terpstra
Twitter | Mastodon | GitHub | 隐私政策]]></description>
      <guid>https://brett.trpstra.net/link/535/16759288/easily-save-and-restore-gem-executables</guid>
      <pubDate>Thu, 01 Aug 2024 19:17:00 GMT</pubDate>
    </item>
    <item>
      <title>标记为 2.6.39，包含流式预览修复</title>
      <link>https://brett.trpstra.net/link/535/16747444/marked-2-dot-6-39-with-streaming-preview-fixes</link>
      <description><![CDATA[]]></description>
      <guid>https://brett.trpstra.net/link/535/16747444/marked-2-dot-6-39-with-streaming-preview-fixes</guid>
      <pubDate>Thu, 18 Jul 2024 16:45:00 GMT</pubDate>
    </item>
    <item>
      <title>黑曜石标注</title>
      <link>https://brett.trpstra.net/link/535/16727652/obsidian-callouts-in-marked</link>
      <description><![CDATA[]]></description>
      <guid>https://brett.trpstra.net/link/535/16727652/obsidian-callouts-in-marked</guid>
      <pubDate>Fri, 28 Jun 2024 00:17:00 GMT</pubDate>
    </item>
    <item>
      <title>Markdown 唇形图 v2</title>
      <link>https://brett.trpstra.net/link/535/16717305/markdown-lipsum-v2</link>
      <description><![CDATA[ API options, paragraphs, elements, parameters, control
API 2版本做出了变动，现在用户可以指定段落数量和包含元素。用户可以使用不同的路径来确定段落长度和数量，还可以控制包含的元素。在路径中添加参数可以实现这些功能。这样用户可以根据自己的需求定制Markdown文档。同时，作者提到如果没有给出参数，默认输出5段中等长度的文本，并提供了详细的路径参数说明。通过API 2，用户可以更自由地生成想要的文档内容。文章中还提到，作者对BrettTerpstra.com的支持来自读者，鼓励点赞或分享。 
I know it’s been less than a week since v1, but I made some major changes to md-lipsum that warrant a version 2.
Basically, I incorporated all of the API options from Loripsum.net, meaning you can now specify how many paragraphs and what elements are included. You can still get a full Markdown document with all elements using https://brettterpstra.com/md-lipsum/api/2/all. You can include /short, /medium, /long, or /verylong in the path to determine paragraph length (can be shortened to s, m, l, vl), and/or a number to determine the number of paragraphs. More paragraphs means more header levels, too. Example:
curl &#39;https://brettterpstra.com/md-lipsum/api/2/all/10/m&#39;

If no parameters are given, e.g. the path is just /api/2, then all elements will be output with 5 paragraphs of medium length.

You can also control exactly what elements are included using additional path parameters. These are detailed on the project page.
Have fun!
Like or share this post Twitter.

BrettTerpstra.com is supported by readers like you. Click here if you&#39;d like to help out.
All materials ©2024 Brett Terpstra
Twitter | Mastodon | GitHub | Privacy Policy]]></description>
      <guid>https://brett.trpstra.net/link/535/16717305/markdown-lipsum-v2</guid>
      <pubDate>Mon, 17 Jun 2024 17:04:00 GMT</pubDate>
    </item>
    <item>
      <title>Text Blaze 可共享文件夹</title>
      <link>https://brett.trpstra.net/link/535/16715638/text-blaze-shareable-folders</link>
      <description><![CDATA[ Text Blaze, snippets, Mac app, Lorem Ipsum, placeholder images

Text Blaze更新后可以方便地共享文本片段文件夹。这个包含随机文本生成器的集合使用了{urlload}命令，适用于Text Blaze。其中包含了用于在HTML/Markdown文档中插入占位图像的片段和Bacon Ipsum、Hipster Ipsum的文本生成器。{urlload}命令可能需要高级账户。总结：更新后的Text Blaze允许方便地共享文本片段文件夹，包含了用于插入占位图像的片段和文本生成器。需要注意{urlload}命令可能需要高级账户。 







When I first tried it out, Text Blaze didn’t make it easy to publicly share folders of snippets. They’ve solved that, apparently, so now you can make folders publicly available from the Mac app. So I present…







Lipsum, a collection of random text generators for Text Blaze. These almost all make use of the {urlload} command, which currently doesn’t show up in the command palette and I’m unclear as to whether they’re available to lower-level accounts (I have a Business subscription). If you try them out and run into issues, let me know.
This set includes a couple of snippets for inserting placeholder images into HTML/Markdown documents, which I use pretty frequently when designing. You’ll also find snippets for Bacon Ipsum (I’m pescatarian, but…) and Hipster Ipsum, for those who prefer a little change from the typical Lorem Ipsum.
If you’re trying out Text Blaze, check out the Lipsum folder. If nothing else, it offers some good examples for using {urlload} in your own snippets.

Standard (for now) PSA: You have to scroll all the way to the bottom of the Text Blaze page to find the Mac app. I don’t know why they don’t make their native apps more obvious…

Like or share this post Twitter.

BrettTerpstra.com is supported by readers like you. Click here if you&#39;d like to help out.
All materials ©2024 Brett Terpstra
Twitter | Mastodon | GitHub | Privacy Policy]]></description>
      <guid>https://brett.trpstra.net/link/535/16715638/text-blaze-shareable-folders</guid>
      <pubDate>Sat, 15 Jun 2024 19:35:00 GMT</pubDate>
    </item>
    <item>
      <title>Markdown HTML API</title>
      <link>https://brett.trpstra.net/link/535/16714717/a-markdown-lorem-ipsum-api</link>
      <description><![CDATA[ Markdown Lorem Ipsum, API, Text Blaze, MD-Lipsum, BrettTerpstra.com

关于构建新的Markdown Lorem Ipsum API用于生成Markdown Lorem Ipsum。作者解释了构建API的原因，提及使用Text Blaze应用以及制作脚本片段的需求。介绍了MD-Lipsum的用途和如何使用API，包括从命令行和Text Blaze使用的示例。提供了对应的curl命令和Text Blaze代码。文中还介绍了网站支持的方式和版权声明。
总结:文章介绍了构建Markdown Lorem Ipsum API的目的，以及如何使用该API生成Markdown Lorem Ipsum。提供了命令行和Text Blaze使用示例，同时提及网站支持方式和版权声明。 
I built a new little API for you. It generates Markdown Lorem Ipsum. First, a little background.
Why?
As I’ve mentioned elsewhere, I’ve been playing with Text Blaze, a cool new app that might eventually replace TextExpander for me. One of the major things missing from Text Blaze, though, is script snippets, which I make use of a lot in TextExpander. What it does offer, though, is a command for fetching a REST API and processing the result. A lot of my script snippets are doing just that, so those are actually more convenient to build in Text Blaze. For the ones that need extra handling, I’ve just been creating web endpoints that run my scripts for me.

When you go to the Text Blaze home page it looks like it’s just a Chrome extension. You have to go all the way to the bottom of the page to find the Mac app (beta).

One such snippet I wanted back was my random Markdown generator, which I use frequently to test out styles for things like Marked, nvUltra, or MultiMarkdown Composer. There’s an existing API called Lorem Markdownum, but it doesn’t generate enough of the syntax consistently to be good for testing themes. So I built my own.
MD-Lipsum
“MD-Lipsum” uses Loripsum.net to generate a full set of HTML markup with random text, and then converts that HTML to basic Markdown. No tables, unfortunately, but it outputs a complete set of standard Markdown elements, including bold/italics, ordered and unordered lists, headers, block quotes, code blocks (fenced), and definition lists (MultiMarkdown syntax).
Usage
To use the API, just point to https://brettterpstra.com/md-lipsum/api/1. You can add /long or /short but it has minimal effect (a shortcoming of the loripsum.net API, I think). It just returns plain text, much like the TitleCase API I made a while back.
You can use it from the command line like:
curl &#39;https://brettterpstra.com/md-lipsum/api/1&#39;
To use it in Text Blaze, you’d want a snippet like:
{urlload: https://brettterpstra.com/md-lipsum/api/1; done=(res) -&gt; [&quot;response&quot;: res]; headers=; body=; method=GET}{=response}
There’s a little page here but it just tells you what’s in this post!
Like or share this post on Mastodon or Twitter.

BrettTerpstra.com is supported by readers like you. Click here if you&#39;d like to help out.
All materials ©2024 Brett Terpstra
Twitter | Mastodon | GitHub | Privacy Policy]]></description>
      <guid>https://brett.trpstra.net/link/535/16714717/a-markdown-lorem-ipsum-api</guid>
      <pubDate>Fri, 14 Jun 2024 17:54:00 GMT</pubDate>
    </item>
    <item>
      <title>2024 年 6 月 12 日网络游览</title>
      <link>https://brett.trpstra.net/link/535/16712243/web-excursions-for-june-12-2024</link>
      <description><![CDATA[ Bartender, acquisition, telemetry, git diffs, Climate anxiety

总结:一家公司最近收购了Bartender，可能会影响其未来；有一款免费的项目可以取代Bartender，被认为是一个有潜力的替代品；在终端中有一个项目可以让git diffs看起来更漂亮；针对气候焦虑的人们，有一些带来希望的消息；在Obsidian中有一些很酷的整合，比如可以将选定的文本保存到指定文件或每日笔记页面。 








jordanbaird/Ice: Powerful menu bar manager for macOS
There’s some question about the future of Bartender after a recent acquisition (and some concerns about new telemetry). This project looks like a solid up-and-coming replacement (and free).
darrenburns/dunk: Prettier git diffs in the terminal 🎨


Prettier git diffs in the terminal


An end to the climate emergency is in our grasp
Climate anxiety keeping you awake? Here’s some hopeful news.
Obsidian — PopClip Extensions
In the vein of cool Obsidian integrations, here’s one for PopClip that can save selected text to a specified file or to the Daily Note page. There’s a similar one for nvUltra in my PopClip Extensions.

Like or share this post Twitter.

BrettTerpstra.com is supported by readers like you. Click here if you&#39;d like to help out.
All materials ©2024 Brett Terpstra
Twitter | Mastodon | GitHub | Privacy Policy]]></description>
      <guid>https://brett.trpstra.net/link/535/16712243/web-excursions-for-june-12-2024</guid>
      <pubDate>Wed, 12 Jun 2024 18:12:00 GMT</pubDate>
    </item>
    <item>
      <title>第 27 版开发者国家调查</title>
      <link>https://brett.trpstra.net/link/535/16705600/the-developer-nation-survey-27th-edition</link>
      <description><![CDATA[ survey, prizes, global, developers, tools


在7月9日之前填写全球开发者调查，有机会赢取丰厚奖品，包括GoPro Hero12 Black、笔记本屏幕扩展器14英寸、三星T7 Shield SSD 1TB、树莓派5、AeroPress咖啡机、Udemy和亚马逊礼品卡等。调查涵盖13个领域，针对所有开发者和无代码软件创建者开放，分享对流行工具和平台的喜好和不满意，对生态系统产生影响。填写问题越多，赢取上述酷炫奖品的机会越多。填写后将获得免费编码资源、优惠券和学习材料的&quot;礼品袋&quot;，支持您的职业发展。总结: 在7月9日之前填写全球开发者调查，有机会赢取丰厚奖品，分享您对工具和平台的看法，对生态系统做出影响，并获得成长支持。 









The 27th Developer Nation Survey is open until July 9th. Take the survey and get entered in a drawing for prizes, including a GoPro Hero12 Black, Laptop Screen Extender 14”, Samsung T7 Shield SSD 1TB, Raspberry Pi 5, AeroPress Coffee Maker, Udemy &amp; Amazon gift cards, Developer Nation Swag and much more! Developer Nation community members are also eligible for an iPad Mini, Amazon gift cards and more.
This is a global developer survey covering 13 areas, including: Web,
Mobile, Desktop, Cloud, Industrial IoT, Consumer Electronics, Embedded
software, AR &amp; VR, Apps/extensions for 3rd-party ecosystems, Games,
Machine Learning &amp; AI, and Data science. It’s open to all developers and
no-code software creators. Share what you like and dislike about popular tools and platforms and make an impact on the ecosystem.
As a thank you you’ll get a “goody bag” with free coding resources,
vouchers and learning material to support your career growth. Also, the
more questions you answer the more chances you get to win the cool
prizes listed above.
Take the survey before July 9th!
Like or share this post Twitter.

BrettTerpstra.com is supported by readers like you. Click here if you&#39;d like to help out.
All materials ©2024 Brett Terpstra
Twitter | Mastodon | GitHub | Privacy Policy]]></description>
      <guid>https://brett.trpstra.net/link/535/16705600/the-developer-nation-survey-27th-edition</guid>
      <pubDate>Wed, 05 Jun 2024 16:25:00 GMT</pubDate>
    </item>
    <item>
      <title>在 Firefox 中添加自定义搜索快捷方式</title>
      <link>https://brett.trpstra.net/link/535/16701010/adding-custom-search-shortcuts-in-firefox</link>
      <description><![CDATA[ firefox, custom search, keyword, bookmark, search

总结：本文介绍了在Firefox浏览器中如何添加自定义搜索快捷方式，通过设置关键词和书签来实现在浏览器地址栏中快速搜索任意网站。用户只需在地址栏输入设置的关键词加上搜索词即可直接加载搜索结果页面，避免繁琐的进入网站、点击搜索以及输入搜索词的步骤。方法包括在目标网站进行搜索、添加书签、编辑书签URL以及设置关键词等步骤。这种自定义搜索方式适用于多数浏览器，方便用户快速获取所需信息。 
This might not be news to most people, but I thought I’d point it out for any Firefox users that don’t know about it: you can add a custom search shortcut for any site, allowing you to use a short keyword followed by search terms and execute the search without going to the site, clicking search, and entering terms.
To add a custom search:

Go to the site you want to search and use its search field to run any search.
On the results page, add a bookmark. You can edit the bookmark title to a generic &lt;SITE NAME&gt; search in this step or in step 4.
Open up the Bookmarks sidebar (⌘B) (or open the Bookmarks manager with ⌥⌘O) and locate the new bookmark. Right click it and choose Edit Bookmark.
Change the search term in the URL to %s. E.g., if you searched for frog, find frog in the URL and replace it.
Add a short “keyword” and edit the title to a generic “X Search” if you didn’t already. The keyword is the short text you’ll use to access the search. It can be as short as one character.
Save the edit.

Now you can just focus the URL bar (⌘L), type the keyword followed by a space and whatever search terms you want to use. The search page will be loaded directly with the results!
YouTube Video
Hope that’s useful to some people. The same thing can be done in most browsers, I just happen to be using mostly Firefox these days. Feel free to add tips for your browser of choice in the comments.
Like or share this post Twitter.

BrettTerpstra.com is supported by readers like you. Click here if you&#39;d like to help out.
All materials ©2024 Brett Terpstra
Twitter | Mastodon | GitHub | Privacy Policy]]></description>
      <guid>https://brett.trpstra.net/link/535/16701010/adding-custom-search-shortcuts-in-firefox</guid>
      <pubDate>Sun, 02 Jun 2024 20:01:00 GMT</pubDate>
    </item>
    <item>
      <title>我应该在 Conductor 中用过滤器</title>
      <link>https://brett.trpstra.net/link/535/16693490/man-i-should-have-started-conductor-with-filters</link>
      <description><![CDATA[ YAML文件, 配置，插入TOC, 文件插入, 代码块插入

总结:
本文介绍了如何通过在YAML配置文件中添加一些新的过滤器来方便地进行配置，如插入表格目录、在内容开头或结尾插入文件、插入原始HTML或代码块等。通过这些过滤器，可以实现在文档中插入目录、文件、原始HTML或代码块的功能。插入的文件可以是绝对路径，也可以存储在指定路径并以文件名引用。这些过滤器使得通常需要使用脚本来完成的任务变得简单，只需一行配置即可。适用于生成PDF、HTML或Markdown文档。最后介绍了如何使用新的insertScript()过滤器添加Mermaid或自定义的MathJax实现。文章提供了更多详细信息。 
I added a few more (obvious) filters to Conductor this morning. I really should have started here, it makes configuration so convenient and alleviates the need for about 50% of what you would do with scripting. Now you can do it all from one YAML file.
The new filters are:



insertTOC(max, after)
insert TOC (max=max levels, after=start, *h1, or h2)


prepend/appendFile(path)
insert a file as Markdown at beginning or end of content


prepend/appendRaw(path)
insert a file as raw HTML at beginning or end of content


prepend/appendCode(path)
insert a file as a code block at beginning or end of content



These allow you to insert a table of contents and append or prepend files, raw HTML, or code blocks.
Inserted files can be absolute paths or you can store templates in ~/.config/conductor/files and just reference them by filename. Perfect for adding things like bios and disclaimers to your documents before outputing them (as PDF, HTML, or even as a new Markdown document).
The table of contents can be inserted at the top (“start” or “top”) or after the first h1 or h2 in the document.
If you use insertTOC(3, h1) after an insertTitle in a sequence, you’d get a title inserted from metadata first, then a TOC inserted after it. (Then use the new insertScript() filter to add Mermaid or a custom MathJax implementation. Sky’s the limit, kind of.)
These filters make some of the more basic tasks you’d usually perform with a Custom Processor script as easy as one line in a config file.
Full details on the project page.
Like or share this post Twitter.

BrettTerpstra.com is supported by readers like you. Click here if you&#39;d like to help out.
All materials ©2024 Brett Terpstra
Twitter | Mastodon | GitHub | Privacy Policy]]></description>
      <guid>https://brett.trpstra.net/link/535/16693490/man-i-should-have-started-conductor-with-filters</guid>
      <pubDate>Sat, 25 May 2024 16:42:00 GMT</pubDate>
    </item>
    <item>
      <title>我不敢相信我忘记了这个导体滤波器</title>
      <link>https://brett.trpstra.net/link/535/16693412/i-cant-believe-i-forgot-this-conductor-filter</link>
      <description><![CDATA[ insertScript, insertTitle, JavaScript, config, BrettTerpstra

JavaScript中新增了insertScript过滤器，可以插入JS脚本；insertTitle过滤器可提取标题并插入内容中。通过配置文件实现自动化操作，支持自定义路径和脚本。提高了使用便捷性和灵活性，增强了功能性。文章介绍了这些新增功能，并希望读者提供更多有用建议。总结:JavaScript功能扩展，配置文件实现自动化操作，提高使用便捷性和灵活性。 
So yesterday I announced a new feature in Conductor called Filters. Little built-in commands for performing simple tasks without having to write whole scripts for them. In the process of writing the feature, I forgot what might be the most useful function of all: injecting JavaScripts.
So I’ve added insertScript(path) as a filter. You can give it a full path to a JavaScript file, or you can create a directory at ~/.config/conductor/javascript, add the file there, and then just reference it by name like filter: insertScript(mermaid) (the .js is added automatically if needed). You can insert multiple scripts at once by separating the paths with commas, e.g. insertScript(blog,mermaid).
I also added an insertTitle filter that will attempt to pull a title out of metadata (YAML or MMD), and failing that use the filename, converting a slug into a titlecased title (e.g. 2024-05-24-my-blog-post.md becomes My Blog Post), and insert it as an H1 at the beginning of the content (after any front matter/metadata).
An example config for using this (assuming the scripts blog.js and mermaid.js exist in the above directory) would look like:
tracks:
  - condition: phase is pre
    tracks:
    - title: Blog post preprocess
      condition: path contains _post AND has yaml
      sequence:
        - filter: setStyle(BrettTerpstra.com)
        - filter: addTitle
        - filter: insertScript(blog,mermaid)
That config would require no scripting at all. The style would be set, an h1 title would be added, and two scripts would be injected before running through the default Marked processor.
If you think of any more that would be useful, please let me know!
Like or share this post Twitter.

BrettTerpstra.com is supported by readers like you. Click here if you&#39;d like to help out.
All materials ©2024 Brett Terpstra
Twitter | Mastodon | GitHub | Privacy Policy]]></description>
      <guid>https://brett.trpstra.net/link/535/16693412/i-cant-believe-i-forgot-this-conductor-filter</guid>
      <pubDate>Sat, 25 May 2024 13:18:00 GMT</pubDate>
    </item>
    <item>
      <title>导体滤波器简化基本操作</title>
      <link>https://brett.trpstra.net/link/535/16693021/conductor-filters-simplify-basic-operations</link>
      <description><![CDATA[]]></description>
      <guid>https://brett.trpstra.net/link/535/16693021/conductor-filters-simplify-basic-operations</guid>
      <pubDate>Fri, 24 May 2024 18:37:00 GMT</pubDate>
    </item>
    </channel>
</rss>